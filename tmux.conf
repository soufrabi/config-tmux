#Set Prefix Key
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix


# Use Alt-arrow keys to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D


# Shift arrow to switch windows
bind -n S-Left previous-window
bind -n S-Right next-window
 
# Mouse mode
setw -g mouse on
 
# Set easier window split keys
# bind-key v split-window -h
# bind-key h split-window -v

# -----------------------------------------------------------------------------
# SPLIT PANES TO STAY IN THE SAME DIRECTORY
bind c new-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -c "#{pane_current_path}"

# Remove delay when switching between Vim modes.
set -sg escape-time 1

# Allow Vim's FocusGained to work when your terminal gains focus.
#   Requires Vim plugin: https://github.com/tmux-plugins/vim-tmux-focus-events
# set -g focus-events on

# Add a bit more scroll history in the buffer.
set -g history-limit 50000

# Enable color support inside of tmux.
# set -g default-terminal "screen-256color"
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",*256col*:Tc"

# Send xterm compatible control arrow keys so they work with Vim.
# setw -g xterm-keys on

# Ensure window titles get renamed automatically.
setw -g automatic-rename

# Ensure window index numbers get reordered on delete.
set-option -g renumber-windows on

# Start windows and panes index at 1, not 0.
set -g base-index 1
setw -g pane-base-index 1

# tmux-yank
set -g @yank_selection 'clipboard'    #'primary' # or 'secondary' or 'clipboard'
set -g @yank_selection_mouse 'clipboard' # or 'primary' or 'secondary'
set -g @yank_with_mouse off # or 'on'

# -----------------------------------------------------------------------------
# WILL RESTORE A  NEOVIM SESSION
set -g @resurrect-strategy-nvim 'session' 
set -g @resurrect-capture-pane-contents 'on'
# prefix(Ctrl-a) and Ctrl-s will save a Vim session
# To restore prefix(Crtl-a) and Ctrl-r

# for vim
set -g @resurrect-strategy-vim 'session'

# VIM MODE BEGIN

setw -g mode-keys vi
unbind-key -T copy-mode-vi v                             # Unbind rectangle toggle
bind-key -T copy-mode-vi 'v' send -X begin-selection     # Begin selection in copy mode.
bind-key -T copy-mode-vi 'C-v' send -X rectangle-toggle  # Begin selection in copy mode.
bind-key -T copy-mode-vi 'y' send -X copy-selection      # Yank selection in copy mode.


# https://superuser.com/questions/395158/tmux-copy-mode-select-text-block#693990
# I am assuming your prefix key is C-a:

#     C-a means: press Ctrl + A
#     C-a [ means: press Ctrl + A then press [

# To do a rectangle selection of text from (1,1) to (2,2) in tmux:

#     Go to the copy mode: C-a [
#     Move the middle of a line
#     Press C-v
#     Press Space
#     Move the selection with jkhl
#     Once you are happy with your selection press Enter (or y if you have the binding in your conf file).
#     You can paste the latest copy buffer by: C-a ]

# Notice that pressing space is necessary for rectangle selection.

# To select lines like you would normally do, go the copy mode, and press v, select with jkhl keys and press y.

# I have these bindings in my .tmux.conf:

# Prior to version 2.4 (20 April 2017):

# setw -g mode-keys vi
# bind-key -t vi-copy 'v' begin-selection     # Begin selection in copy mode.
# bind-key -t vi-copy 'C-v' rectangle-toggle  # Begin selection in copy mode.
# bind-key -t vi-copy 'y' copy-selection      # Yank selection in copy mode.

# After version 2.4:

# setw -g mode-keys vi
# bind-key -T copy-mode-vi 'v' send -X begin-selection     # Begin selection in copy mode.
# bind-key -T copy-mode-vi 'C-v' send -X rectangle-toggle  # Begin selection in copy mode.
# bind-key -T copy-mode-vi 'y' send -X copy-selection      # Yank selection in copy mode.

# It is important to unbind default rectangle-toggle binding:

# unbind-key -t vi-copy v  # Prior to version 2.4
# unbind-key -T copy-mode-vi v

# Otherwise new 'C-v' binding doesn't work.

# VIM MODE END


# CONTINUUM BEGIN
# Automatic restore
# Last saved environment is automatically restored when tmux is started.
# Put set -g @continuum-restore 'on' in .tmux.conf to enable this.
# Note: automatic restore happens exclusively on tmux server start. No other action (e.g. sourcing .tmux.conf) triggers this.

set -g @continuum-restore 'on'

# CONTINUUM END


# Easy config reload
bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "~/.config/tmux/tmux.conf reloaded."

# TPM path
# set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins/'
# TPM path was not needed in arch linux
# remember to install tmux plugins use
# Prefix + capital I not small i

# -----------------------------------------------------------------------------
# LIST OF PLUGINS
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
# tmux-yank needs wl-clipboard on Wayland and xclip on X11


# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
